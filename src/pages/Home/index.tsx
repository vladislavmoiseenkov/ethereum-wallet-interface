import { useCallback, useContext, useMemo } from 'react';

import { NextPage } from 'next';
import Head from 'next/head';
import dynamic from 'next/dynamic';

import { Box, Button, Card, CardBody, Container, Flex, Tooltip } from '@chakra-ui/react';

import { TokenList } from '../../components/TokenList';

import { shortenAddr } from '../../web3/utils';

import WalletContext from '../../context/WalletContext/WalletContext';

const Home: NextPage = () => {
  const { address, onDisconnect, onConnect } = useContext(WalletContext)

  const btnTitle: string = useMemo(() => address ? `Disconnect` : 'Connect', [address]);

  const handleClick = useCallback(async () => {
    if (address) {
      await onDisconnect();
    } else {
      await onConnect();
    }
  }, [address, onConnect, onDisconnect]);

  const copyToClipboard = useCallback(async () => {
    try {
      await navigator.clipboard.writeText(address as string);
    } catch (e) {
      console.error('Copy to clipboard err:', e);
    }
  }, [address]);

  return (
    <>
      <Head>
        <title>ethereum-wallet-interface</title>
        <meta name="description" content="Generated by create next app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <Container maxW={'1200px'} height={'100vh'}>
        <Flex flex={1} justifyContent={'center'} alignItems={'center'} h={'100%'}>
          <Card maxW={'500px'} mx={'auto'} w={'100%'} bgColor={'#2D3748'} borderRadius={'12px'}>
            <CardBody>
              <Flex flexDirection={'column'} gap={2}>
                <Flex justifyContent={address ? 'space-between' : 'center'}>
                  {address && (
                    <Box>
                      <Tooltip label={'Click to copy address..'} placement={'top'}>
                        <Button
                          color={'white'}
                          variant={'outline'}
                          onClick={copyToClipboard}
                          _hover={{ color: '#2D3748', bgColor: 'white' }}
                        >
                          {shortenAddr(address)}
                        </Button>
                      </Tooltip>
                    </Box>
                  )}

                  <Button onClick={handleClick}>{btnTitle}</Button>
                </Flex>

                {address && (
                  <TokenList/>
                )}
              </Flex>
            </CardBody>
          </Card>
        </Flex>
      </Container>
    </>
  );
};

export default dynamic(() => Promise.resolve(Home), {
  ssr: false,
});
